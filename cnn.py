# -*- coding: utf-8 -*-
"""Untitled3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1pjnb7fejeRn5UMJVVMgsg6tuv_mB8n-V
"""

# Setup and Data Loading
import torch
import torch.nn as nn
import torch.nn.functional as F
from torchvision import datasets, transforms
import numpy as np
import pandas as pd
from sklearn.metrics import confusion_matrix
import matplotlib.pyplot as plt

# Convert MNIST image files into 4-D tensor (# of images, height, width, color channels)
transform = transforms.ToTensor()

# Train Data
train_data = datasets.MNIST(root='cnn_data', train=True, download=True, transform=transform)

# Test Data
test_data = datasets.MNIST(root='cnn_data', train=False, download=True, transform=transform)

# Create small batch size for images....lets say 10
train_loader = torch.utils.data.DataLoader(train_data, batch_size=10, shuffle=True)
test_loader = torch.utils.data.DataLoader(test_data, batch_size=10, shuffle=True)

# Define our CNN Model
# Descrube convolution layer and whats its going to do (2 layers)

# Can add a padding so that the image doesn't get smaller in pixel size (need for real-world images)
conv1 = nn.Conv2d(1,6,3,1)
conv2 = nn.Conv2d(6,16,3,1)

# Grab 1 MNIST record/image
for i, (X_train, y_train) in enumerate(train_data):
  break

x = X_train.view(1, 1, 28, 28)


# Perform Our first convolution
x = F.relu(conv1(x))

# Pass through pooling layer
x = F.max_pool2d(x, 2, 2)

# Pass through second convolution
x = F.relu(conv2(x))

# Pass through second pooling layer
x = F.max_pool2d(x, 2, 2)

x.shape

# Model Class
class ConvolutionalNetwork(nn.Module):
  def __init__(self):
    super().__init__()
    self.conv1 = nn.Conv2d(1,6,3,1)
    self.conv2 = nn.Conv2d(6,16,3,1)
    self.fc1 = nn.Linear(5*5*16, 120)
    self.fc2 = nn.Linear(120, 84)
    self.fc3 = nn.Linear(84, 10)
  def forward(self, x):
    x = F.relu(self.conv1(x))
    x = F.max_pool2d(x, 2, 2)
    x = F.relu(self.conv2(x))
    x = F.max_pool2d(x, 2, 2)
    x = x.view(-1, 5*5*16)
    x = F.relu(self.fc1(x))
    x = F.relu(self.fc2(x))
    x = self.fc3(x)
    return F.log_softmax(x, dim=1)

# Training and Evaluation Setup

# Create an Instance of Our Model
torch.manual_seed(41)
model = ConvolutionalNetwork()

# Loss Function Optimizer
criterion = nn.CrossEntropyLoss()
optimizer = torch.optim.Adam(model.parameters(), lr=0.001)

# Training Loop
import time
start_time = time.time()

# Create variables to track stuff
epochs = 5
train_losses = []
test_losses = []
train_correct = []
test_correct = []

for i in range(epochs):
    trn_corr = 0
    tst_corr = 0

    # Train
    for b,(X_train, y_train) in enumerate(train_loader):
      b+=1
      y_pred = model(X_train) # predicted valued from the training set, NOT FLATTENED
      loss = criterion(y_pred, y_train)

      predicted = torch.max(y_pred.data, 1)[1]

      batch_corr = (predicted == y_train).sum()

      trn_corr += batch_corr

      # Update parameters
      optimizer.zero_grad()
      loss.backward()
      optimizer.step()

      if b % 600 == 0:
        print(f'Epoch {i} Batch {b} Loss {loss.item()}')

    train_losses.append(loss.item())
    train_correct.append(trn_corr.item)

    # Test
    with torch.no_grad():
      for b, (X_test, y_test) in enumerate(test_loader):
        y_val = model(X_test)
        predicted = torch.max(y_val.data, 1)[1]
        tst_corr += (predicted == y_test).sum()
    loss = criterion(y_val, y_test)
    test_losses.append(loss.item())
    test_correct.append(tst_corr.item())

current_time = time.time()
total = current_time - start_time
print(f'Training Took: {total/60} minutes!!!')

#test_data[4143] # Tensor with a image in it (Number 9)

#test_data[4143][0].reshape(28,28)

# Pass image through model
model.eval()
with torch.no_grad():
  input_tensor = test_data[4143][0].view(1,1,28,28)
  output = model(input_tensor)

output.argmax()